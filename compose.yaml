# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  server:
    build:
      context: .
      dockerfile: Dockerfile.service
    environment:
      - PG_DB_HOST=pg
      - PG_DB_PORT=5432
      - PG_DB_USER=postgres
      - PG_DB_PASSWORD=password
      - PG_DB_NAME=imse_db
      - MONGO_DB_HOST=mongo
      - MONGO_DB_PORT=27017
      - MONGO_DB_USER=root
      - MONGO_DB_PASSWORD=example
    ports:
      - 3000:3000
    depends_on:
      pg: 
        condition: service_healthy
      mongo:
        condition: service_healthy

    secrets:
      - db-password
  
  mongo:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    ports:
      - "27018:27017"
    healthcheck: 
      test: ["CMD-SHELL", "mongosh --eval 'db.adminCommand(\"ping\")'"] 
      interval: 5s 
      timeout: 5s 
      retries: 5 
      start_period: 10s 

  pg:
    build:
      context: .
      dockerfile: Dockerfile.pg
    restart: always
    user: postgres
    container_name: imse_db
    secrets:
      - db-password
    environment:
      - POSTGRES_DB=imse_db
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    ports:
      - "5433:5432"
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
secrets:
  db-password:
    file: db/password.txt
